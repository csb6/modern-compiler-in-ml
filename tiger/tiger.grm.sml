functor TigerLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : Tiger_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct

end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\182\000\002\000\182\000\003\000\182\000\006\000\182\000\
\\007\000\182\000\010\000\182\000\011\000\182\000\014\000\182\000\
\\015\000\182\000\019\000\182\000\020\000\182\000\027\000\037\000\
\\028\000\036\000\029\000\035\000\030\000\034\000\032\000\182\000\
\\034\000\182\000\036\000\182\000\038\000\182\000\040\000\182\000\
\\044\000\182\000\000\000\
\\001\000\001\000\183\000\002\000\183\000\003\000\183\000\006\000\183\000\
\\007\000\183\000\010\000\183\000\011\000\183\000\014\000\183\000\
\\015\000\183\000\019\000\183\000\020\000\183\000\027\000\037\000\
\\028\000\036\000\029\000\035\000\030\000\034\000\032\000\183\000\
\\034\000\183\000\036\000\183\000\038\000\183\000\040\000\183\000\
\\044\000\183\000\000\000\
\\001\000\001\000\184\000\002\000\184\000\003\000\184\000\006\000\184\000\
\\007\000\184\000\010\000\184\000\011\000\184\000\014\000\184\000\
\\015\000\184\000\019\000\184\000\020\000\184\000\027\000\037\000\
\\028\000\036\000\029\000\035\000\030\000\034\000\032\000\184\000\
\\034\000\184\000\036\000\184\000\038\000\184\000\040\000\184\000\
\\044\000\184\000\000\000\
\\001\000\001\000\185\000\002\000\185\000\003\000\185\000\006\000\185\000\
\\007\000\185\000\010\000\185\000\011\000\185\000\014\000\185\000\
\\015\000\185\000\019\000\185\000\020\000\185\000\027\000\037\000\
\\028\000\036\000\029\000\035\000\030\000\034\000\032\000\185\000\
\\034\000\185\000\036\000\185\000\038\000\185\000\040\000\185\000\
\\044\000\185\000\000\000\
\\001\000\001\000\186\000\002\000\186\000\003\000\186\000\006\000\186\000\
\\007\000\186\000\010\000\186\000\011\000\186\000\014\000\186\000\
\\015\000\186\000\019\000\186\000\020\000\186\000\027\000\037\000\
\\028\000\036\000\029\000\035\000\030\000\034\000\032\000\186\000\
\\034\000\186\000\036\000\186\000\038\000\186\000\040\000\186\000\
\\044\000\186\000\000\000\
\\001\000\001\000\187\000\002\000\187\000\003\000\187\000\006\000\187\000\
\\007\000\187\000\010\000\187\000\011\000\187\000\014\000\187\000\
\\015\000\187\000\019\000\187\000\020\000\187\000\027\000\037\000\
\\028\000\036\000\029\000\035\000\030\000\034\000\032\000\187\000\
\\034\000\187\000\036\000\187\000\038\000\187\000\040\000\187\000\
\\044\000\187\000\000\000\
\\001\000\001\000\092\000\002\000\091\000\003\000\090\000\007\000\089\000\000\000\
\\001\000\004\000\028\000\006\000\103\000\008\000\027\000\009\000\026\000\
\\012\000\025\000\013\000\024\000\016\000\023\000\029\000\022\000\
\\037\000\021\000\041\000\020\000\042\000\019\000\043\000\018\000\000\000\
\\001\000\004\000\028\000\008\000\027\000\009\000\026\000\012\000\025\000\
\\013\000\024\000\016\000\023\000\029\000\022\000\036\000\049\000\
\\037\000\021\000\041\000\020\000\042\000\019\000\043\000\018\000\000\000\
\\001\000\004\000\028\000\008\000\027\000\009\000\026\000\012\000\025\000\
\\013\000\024\000\016\000\023\000\029\000\022\000\036\000\077\000\
\\037\000\021\000\041\000\020\000\042\000\019\000\043\000\018\000\000\000\
\\001\000\004\000\028\000\008\000\027\000\009\000\026\000\012\000\025\000\
\\013\000\024\000\016\000\023\000\029\000\022\000\037\000\021\000\
\\041\000\020\000\042\000\019\000\043\000\018\000\000\000\
\\001\000\005\000\133\000\000\000\
\\001\000\006\000\112\000\019\000\045\000\020\000\044\000\021\000\043\000\
\\022\000\042\000\023\000\041\000\024\000\040\000\025\000\039\000\
\\026\000\038\000\027\000\037\000\028\000\036\000\029\000\035\000\
\\030\000\034\000\038\000\033\000\000\000\
\\001\000\010\000\084\000\019\000\045\000\020\000\044\000\021\000\043\000\
\\022\000\042\000\023\000\041\000\024\000\040\000\025\000\039\000\
\\026\000\038\000\027\000\037\000\028\000\036\000\029\000\035\000\
\\030\000\034\000\038\000\033\000\000\000\
\\001\000\010\000\111\000\019\000\045\000\020\000\044\000\021\000\043\000\
\\022\000\042\000\023\000\041\000\024\000\040\000\025\000\039\000\
\\026\000\038\000\027\000\037\000\028\000\036\000\029\000\035\000\
\\030\000\034\000\038\000\033\000\000\000\
\\001\000\011\000\085\000\000\000\
\\001\000\015\000\083\000\019\000\045\000\020\000\044\000\021\000\043\000\
\\022\000\042\000\023\000\041\000\024\000\040\000\025\000\039\000\
\\026\000\038\000\027\000\037\000\028\000\036\000\029\000\035\000\
\\030\000\034\000\038\000\033\000\000\000\
\\001\000\017\000\127\000\033\000\126\000\043\000\125\000\000\000\
\\001\000\018\000\032\000\031\000\031\000\035\000\030\000\000\000\
\\001\000\018\000\115\000\039\000\114\000\000\000\
\\001\000\018\000\131\000\000\000\
\\001\000\019\000\045\000\020\000\044\000\021\000\043\000\022\000\042\000\
\\023\000\041\000\024\000\040\000\025\000\039\000\026\000\038\000\
\\027\000\037\000\028\000\036\000\029\000\035\000\030\000\034\000\
\\034\000\093\000\038\000\033\000\000\000\
\\001\000\019\000\045\000\020\000\044\000\021\000\043\000\022\000\042\000\
\\023\000\041\000\024\000\040\000\025\000\039\000\026\000\038\000\
\\027\000\037\000\028\000\036\000\029\000\035\000\030\000\034\000\
\\036\000\082\000\038\000\033\000\000\000\
\\001\000\026\000\098\000\000\000\
\\001\000\026\000\116\000\000\000\
\\001\000\026\000\136\000\039\000\135\000\000\000\
\\001\000\026\000\145\000\000\000\
\\001\000\032\000\081\000\043\000\080\000\000\000\
\\001\000\032\000\097\000\040\000\096\000\000\000\
\\001\000\032\000\139\000\040\000\128\000\000\000\
\\001\000\036\000\095\000\040\000\094\000\000\000\
\\001\000\036\000\129\000\040\000\128\000\000\000\
\\001\000\037\000\113\000\000\000\
\\001\000\039\000\130\000\000\000\
\\001\000\039\000\141\000\000\000\
\\001\000\043\000\056\000\000\000\
\\001\000\043\000\060\000\000\000\
\\001\000\043\000\080\000\000\000\
\\001\000\043\000\104\000\000\000\
\\001\000\043\000\105\000\000\000\
\\001\000\043\000\106\000\000\000\
\\001\000\043\000\122\000\000\000\
\\001\000\043\000\134\000\000\000\
\\001\000\043\000\137\000\000\000\
\\001\000\043\000\140\000\000\000\
\\001\000\043\000\142\000\000\000\
\\001\000\043\000\144\000\000\000\
\\001\000\044\000\000\000\000\000\
\\148\000\019\000\045\000\020\000\044\000\021\000\043\000\022\000\042\000\
\\023\000\041\000\024\000\040\000\025\000\039\000\026\000\038\000\
\\027\000\037\000\028\000\036\000\029\000\035\000\030\000\034\000\
\\038\000\033\000\000\000\
\\149\000\000\000\
\\150\000\000\000\
\\151\000\000\000\
\\152\000\000\000\
\\153\000\000\000\
\\154\000\018\000\032\000\031\000\031\000\035\000\030\000\000\000\
\\155\000\000\000\
\\156\000\000\000\
\\157\000\000\000\
\\158\000\000\000\
\\159\000\000\000\
\\160\000\000\000\
\\161\000\000\000\
\\162\000\000\000\
\\163\000\000\000\
\\164\000\000\000\
\\165\000\000\000\
\\166\000\000\000\
\\167\000\000\000\
\\167\000\033\000\047\000\037\000\046\000\000\000\
\\168\000\000\000\
\\169\000\000\000\
\\169\000\005\000\029\000\000\000\
\\170\000\000\000\
\\171\000\000\000\
\\172\000\019\000\045\000\020\000\044\000\021\000\043\000\022\000\042\000\
\\023\000\041\000\024\000\040\000\025\000\039\000\026\000\038\000\
\\027\000\037\000\028\000\036\000\029\000\035\000\030\000\034\000\
\\038\000\033\000\000\000\
\\173\000\019\000\045\000\020\000\044\000\021\000\043\000\022\000\042\000\
\\023\000\041\000\024\000\040\000\025\000\039\000\026\000\038\000\
\\027\000\037\000\028\000\036\000\029\000\035\000\030\000\034\000\
\\038\000\033\000\000\000\
\\174\000\000\000\
\\175\000\000\000\
\\176\000\019\000\045\000\020\000\044\000\021\000\043\000\022\000\042\000\
\\023\000\041\000\024\000\040\000\025\000\039\000\026\000\038\000\
\\027\000\037\000\028\000\036\000\029\000\035\000\030\000\034\000\000\000\
\\177\000\000\000\
\\178\000\000\000\
\\179\000\000\000\
\\180\000\020\000\044\000\021\000\043\000\022\000\042\000\023\000\041\000\
\\024\000\040\000\025\000\039\000\026\000\038\000\027\000\037\000\
\\028\000\036\000\029\000\035\000\030\000\034\000\000\000\
\\181\000\021\000\043\000\022\000\042\000\023\000\041\000\024\000\040\000\
\\025\000\039\000\026\000\038\000\027\000\037\000\028\000\036\000\
\\029\000\035\000\030\000\034\000\000\000\
\\188\000\027\000\037\000\028\000\036\000\000\000\
\\189\000\027\000\037\000\028\000\036\000\000\000\
\\190\000\000\000\
\\191\000\000\000\
\\192\000\019\000\045\000\020\000\044\000\021\000\043\000\022\000\042\000\
\\023\000\041\000\024\000\040\000\025\000\039\000\026\000\038\000\
\\027\000\037\000\028\000\036\000\029\000\035\000\030\000\034\000\000\000\
\\193\000\000\000\
\\194\000\000\000\
\\195\000\019\000\045\000\020\000\044\000\021\000\043\000\022\000\042\000\
\\023\000\041\000\024\000\040\000\025\000\039\000\026\000\038\000\
\\027\000\037\000\028\000\036\000\029\000\035\000\030\000\034\000\
\\038\000\033\000\000\000\
\\196\000\019\000\045\000\020\000\044\000\021\000\043\000\022\000\042\000\
\\023\000\041\000\024\000\040\000\025\000\039\000\026\000\038\000\
\\027\000\037\000\028\000\036\000\029\000\035\000\030\000\034\000\
\\038\000\033\000\000\000\
\\197\000\000\000\
\\198\000\000\000\
\\199\000\019\000\045\000\020\000\044\000\021\000\043\000\022\000\042\000\
\\023\000\041\000\024\000\040\000\025\000\039\000\026\000\038\000\
\\027\000\037\000\028\000\036\000\029\000\035\000\030\000\034\000\
\\038\000\033\000\000\000\
\\200\000\014\000\110\000\019\000\045\000\020\000\044\000\021\000\043\000\
\\022\000\042\000\023\000\041\000\024\000\040\000\025\000\039\000\
\\026\000\038\000\027\000\037\000\028\000\036\000\029\000\035\000\
\\030\000\034\000\038\000\033\000\000\000\
\\201\000\019\000\045\000\020\000\044\000\021\000\043\000\022\000\042\000\
\\023\000\041\000\024\000\040\000\025\000\039\000\026\000\038\000\
\\027\000\037\000\028\000\036\000\029\000\035\000\030\000\034\000\
\\038\000\033\000\000\000\
\\202\000\019\000\045\000\020\000\044\000\021\000\043\000\022\000\042\000\
\\023\000\041\000\024\000\040\000\025\000\039\000\026\000\038\000\
\\027\000\037\000\028\000\036\000\029\000\035\000\030\000\034\000\
\\038\000\033\000\000\000\
\\203\000\000\000\
\\204\000\000\000\
\\205\000\000\000\
\\206\000\000\000\
\\207\000\000\000\
\\208\000\019\000\045\000\020\000\044\000\021\000\043\000\022\000\042\000\
\\023\000\041\000\024\000\040\000\025\000\039\000\026\000\038\000\
\\027\000\037\000\028\000\036\000\029\000\035\000\030\000\034\000\
\\038\000\033\000\000\000\
\\209\000\019\000\045\000\020\000\044\000\021\000\043\000\022\000\042\000\
\\023\000\041\000\024\000\040\000\025\000\039\000\026\000\038\000\
\\027\000\037\000\028\000\036\000\029\000\035\000\030\000\034\000\
\\038\000\033\000\000\000\
\\210\000\019\000\045\000\020\000\044\000\021\000\043\000\022\000\042\000\
\\023\000\041\000\024\000\040\000\025\000\039\000\026\000\038\000\
\\027\000\037\000\028\000\036\000\029\000\035\000\030\000\034\000\
\\038\000\033\000\000\000\
\\211\000\019\000\045\000\020\000\044\000\021\000\043\000\022\000\042\000\
\\023\000\041\000\024\000\040\000\025\000\039\000\026\000\038\000\
\\027\000\037\000\028\000\036\000\029\000\035\000\030\000\034\000\
\\038\000\033\000\000\000\
\\212\000\000\000\
\\213\000\000\000\
\\214\000\000\000\
\\215\000\043\000\121\000\000\000\
\\216\000\000\000\
\\217\000\000\000\
\\218\000\000\000\
\"
val actionRowNumbers =
"\010\000\071\000\066\000\065\000\
\\064\000\061\000\060\000\059\000\
\\063\000\062\000\058\000\055\000\
\\056\000\049\000\054\000\048\000\
\\068\000\052\000\053\000\008\000\
\\010\000\010\000\010\000\035\000\
\\102\000\050\000\051\000\010\000\
\\010\000\036\000\010\000\010\000\
\\010\000\010\000\010\000\010\000\
\\010\000\010\000\010\000\010\000\
\\010\000\010\000\010\000\010\000\
\\009\000\027\000\022\000\073\000\
\\081\000\016\000\013\000\070\000\
\\015\000\018\000\067\000\006\000\
\\078\000\021\000\069\000\074\000\
\\088\000\085\000\084\000\087\000\
\\086\000\005\000\004\000\003\000\
\\002\000\001\000\000\000\083\000\
\\082\000\030\000\092\000\090\000\
\\028\000\077\000\023\000\080\000\
\\057\000\010\000\010\000\010\000\
\\101\000\100\000\099\000\007\000\
\\038\000\039\000\040\000\072\000\
\\010\000\089\000\037\000\079\000\
\\010\000\096\000\097\000\014\000\
\\012\000\094\000\032\000\019\000\
\\024\000\091\000\076\000\075\000\
\\010\000\010\000\093\000\111\000\
\\041\000\010\000\017\000\095\000\
\\098\000\110\000\031\000\033\000\
\\020\000\104\000\103\000\112\000\
\\111\000\011\000\042\000\025\000\
\\043\000\010\000\029\000\044\000\
\\034\000\045\000\010\000\109\000\
\\105\000\113\000\114\000\046\000\
\\026\000\106\000\108\000\010\000\
\\107\000\047\000"
val gotoT =
"\
\\001\000\145\000\007\000\015\000\009\000\014\000\010\000\013\000\
\\011\000\012\000\013\000\011\000\014\000\010\000\015\000\009\000\
\\016\000\008\000\017\000\007\000\018\000\006\000\021\000\005\000\
\\022\000\004\000\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\046\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\048\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\049\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\050\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\009\000\053\000\017\000\052\000\026\000\051\000\000\000\
\\002\000\055\000\000\000\
\\000\000\
\\000\000\
\\007\000\056\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\057\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\007\000\059\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\060\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\061\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\062\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\063\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\064\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\065\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\066\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\067\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\068\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\069\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\070\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\071\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\072\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\074\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\012\000\073\000\013\000\011\000\014\000\010\000\015\000\009\000\
\\016\000\008\000\017\000\007\000\018\000\006\000\021\000\005\000\
\\022\000\004\000\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\019\000\077\000\020\000\076\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\086\000\006\000\085\000\008\000\084\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\097\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\098\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\099\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\100\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\105\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\019\000\106\000\000\000\
\\000\000\
\\007\000\107\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\115\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\007\000\116\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\005\000\118\000\025\000\117\000\000\000\
\\000\000\
\\007\000\121\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\003\000\122\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\005\000\130\000\025\000\117\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\136\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\141\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\144\000\009\000\014\000\010\000\013\000\011\000\012\000\
\\013\000\011\000\014\000\010\000\015\000\009\000\016\000\008\000\
\\017\000\007\000\018\000\006\000\021\000\005\000\022\000\004\000\
\\023\000\003\000\024\000\002\000\026\000\001\000\000\000\
\\000\000\
\\000\000\
\"
val numstates = 146
val numrules = 71
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | ID of unit ->  (string) | INT of unit ->  (int)
 | STRING of unit ->  (string)
end
type svalue = MlyValue.svalue
type result = unit
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn _ => false
val preferred_change : (term list * term list) list = 
nil
val noShift = 
fn (T 43) => true | _ => false
val showTerminal =
fn (T 0) => "TYPE"
  | (T 1) => "VAR"
  | (T 2) => "FUNCTION"
  | (T 3) => "BREAK"
  | (T 4) => "OF"
  | (T 5) => "END"
  | (T 6) => "IN"
  | (T 7) => "NIL"
  | (T 8) => "LET"
  | (T 9) => "DO"
  | (T 10) => "TO"
  | (T 11) => "FOR"
  | (T 12) => "WHILE"
  | (T 13) => "ELSE"
  | (T 14) => "THEN"
  | (T 15) => "IF"
  | (T 16) => "ARRAY"
  | (T 17) => "ASSIGN"
  | (T 18) => "OR"
  | (T 19) => "AND"
  | (T 20) => "GE"
  | (T 21) => "GT"
  | (T 22) => "LE"
  | (T 23) => "LT"
  | (T 24) => "NEQ"
  | (T 25) => "EQ"
  | (T 26) => "DIVIDE"
  | (T 27) => "TIMES"
  | (T 28) => "MINUS"
  | (T 29) => "PLUS"
  | (T 30) => "DOT"
  | (T 31) => "RBRACE"
  | (T 32) => "LBRACE"
  | (T 33) => "RBRACK"
  | (T 34) => "LBRACK"
  | (T 35) => "RPAREN"
  | (T 36) => "LPAREN"
  | (T 37) => "SEMICOLON"
  | (T 38) => "COLON"
  | (T 39) => "COMMA"
  | (T 40) => "STRING"
  | (T 41) => "INT"
  | (T 42) => "ID"
  | (T 43) => "EOF"
  | (T 44) => "UMINUS"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn _ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 44) $$ (T 43) $$ (T 39) $$ (T 38) $$ (T 37) $$ (T 36) $$ (T 35)
 $$ (T 34) $$ (T 33) $$ (T 32) $$ (T 31) $$ (T 30) $$ (T 29) $$ (T 28)
 $$ (T 27) $$ (T 26) $$ (T 25) $$ (T 24) $$ (T 23) $$ (T 22) $$ (T 21)
 $$ (T 20) $$ (T 19) $$ (T 18) $$ (T 17) $$ (T 16) $$ (T 15) $$ (T 14)
 $$ (T 13) $$ (T 12) $$ (T 11) $$ (T 10) $$ (T 9) $$ (T 8) $$ (T 7)
 $$ (T 6) $$ (T 5) $$ (T 4) $$ (T 3) $$ (T 2) $$ (T 1) $$ (T 0)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.ntVOID EXP1, EXP1left, EXP1right)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
EXP1 = EXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, EXP1left, EXP1right), rest671)
end
|  ( 1, ( ( _, ( MlyValue.ntVOID NOVAL1, NOVAL1left, NOVAL1right)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
NOVAL1 = NOVAL1 ()
 in ()
end; ()))
 in ( LrTable.NT 6, ( result, NOVAL1left, NOVAL1right), rest671)
end
|  ( 2, ( ( _, ( _, NIL1left, NIL1right)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 6, ( result, NIL1left, NIL1right), rest671)
end
|  ( 3, ( ( _, ( _, BREAK1left, BREAK1right)) :: rest671)) => let val 
 result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 6, ( result, BREAK1left, BREAK1right), rest671)
end
|  ( 4, ( ( _, ( MlyValue.INT INT1, INT1left, INT1right)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  INT1 = INT1
 ()
 in ()
end; ()))
 in ( LrTable.NT 6, ( result, INT1left, INT1right), rest671)
end
|  ( 5, ( ( _, ( MlyValue.STRING STRING1, STRING1left, STRING1right))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 STRING1 = STRING1 ()
 in ()
end; ()))
 in ( LrTable.NT 6, ( result, STRING1left, STRING1right), rest671)
end
|  ( 6, ( ( _, ( MlyValue.ntVOID LVALUE1, LVALUE1left, LVALUE1right))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 LVALUE1 = LVALUE1 ()
 in ()
end; ()))
 in ( LrTable.NT 6, ( result, LVALUE1left, LVALUE1right), rest671)
end
|  ( 7, ( ( _, ( MlyValue.ntVOID FUNCALL1, FUNCALL1left, FUNCALL1right
)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let
 val  FUNCALL1 = FUNCALL1 ()
 in ()
end; ()))
 in ( LrTable.NT 6, ( result, FUNCALL1left, FUNCALL1right), rest671)

end
|  ( 8, ( ( _, ( MlyValue.ntVOID EXPSEQ1, EXPSEQ1left, EXPSEQ1right))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 EXPSEQ1 = EXPSEQ1 ()
 in ()
end; ()))
 in ( LrTable.NT 6, ( result, EXPSEQ1left, EXPSEQ1right), rest671)
end
|  ( 9, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.ntVOID EXP1,
 _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val  result
 = MlyValue.ntVOID (fn _ => ( let val  EXP1 = EXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 6, ( result, LPAREN1left, RPAREN1right), rest671)
end
|  ( 10, ( ( _, ( MlyValue.ntVOID LETEXP1, LETEXP1left, LETEXP1right))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 LETEXP1 = LETEXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 6, ( result, LETEXP1left, LETEXP1right), rest671)
end
|  ( 11, ( ( _, ( MlyValue.ntVOID ASSIGNEXP1, ASSIGNEXP1left, 
ASSIGNEXP1right)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  ASSIGNEXP1 = ASSIGNEXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 6, ( result, ASSIGNEXP1left, ASSIGNEXP1right), 
rest671)
end
|  ( 12, ( ( _, ( MlyValue.ntVOID RECORDCREATE1, RECORDCREATE1left, 
RECORDCREATE1right)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  RECORDCREATE1 = RECORDCREATE1 ()
 in ()
end; ()))
 in ( LrTable.NT 6, ( result, RECORDCREATE1left, RECORDCREATE1right), 
rest671)
end
|  ( 13, ( ( _, ( MlyValue.ntVOID ARRAYCREATE1, ARRAYCREATE1left, 
ARRAYCREATE1right)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  ARRAYCREATE1 = ARRAYCREATE1 ()
 in ()
end; ()))
 in ( LrTable.NT 6, ( result, ARRAYCREATE1left, ARRAYCREATE1right), 
rest671)
end
|  ( 14, ( ( _, ( MlyValue.ntVOID UNARYEXP1, UNARYEXP1left, 
UNARYEXP1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn
 _ => ( let val  UNARYEXP1 = UNARYEXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 6, ( result, UNARYEXP1left, UNARYEXP1right), rest671)

end
|  ( 15, ( ( _, ( MlyValue.ntVOID BINEXP1, BINEXP1left, BINEXP1right))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 BINEXP1 = BINEXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 6, ( result, BINEXP1left, BINEXP1right), rest671)
end
|  ( 16, ( ( _, ( MlyValue.ntVOID IFELSEEXP1, IFELSEEXP1left, 
IFELSEEXP1right)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  IFELSEEXP1 = IFELSEEXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 6, ( result, IFELSEEXP1left, IFELSEEXP1right), 
rest671)
end
|  ( 17, ( ( _, ( MlyValue.ntVOID WHILEEXP1, WHILEEXP1left, 
WHILEEXP1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn
 _ => ( let val  WHILEEXP1 = WHILEEXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 6, ( result, WHILEEXP1left, WHILEEXP1right), rest671)

end
|  ( 18, ( ( _, ( MlyValue.ntVOID FOREXP1, FOREXP1left, FOREXP1right))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 FOREXP1 = FOREXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 6, ( result, FOREXP1left, FOREXP1right), rest671)
end
|  ( 19, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671)) =>
 let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 in ()
end; ()))
 in ( LrTable.NT 8, ( result, ID1left, ID1right), rest671)
end
|  ( 20, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: _ :: ( _, ( 
MlyValue.ntVOID LVALUE1, LVALUE1left, _)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ( let val  LVALUE1 = LVALUE1 ()
 val  ID1 = ID1 ()
 in ()
end; ()))
 in ( LrTable.NT 8, ( result, LVALUE1left, ID1right), rest671)
end
|  ( 21, ( ( _, ( MlyValue.ntVOID ARRAYLVALUE1, ARRAYLVALUE1left, 
ARRAYLVALUE1right)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  ARRAYLVALUE1 = ARRAYLVALUE1 ()
 in ()
end; ()))
 in ( LrTable.NT 8, ( result, ARRAYLVALUE1left, ARRAYLVALUE1right), 
rest671)
end
|  ( 22, ( ( _, ( _, _, RBRACK1right)) :: ( _, ( MlyValue.ntVOID EXP1,
 _, _)) :: _ :: ( _, ( MlyValue.ntVOID LVALUE1, LVALUE1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
LVALUE1 = LVALUE1 ()
 val  EXP1 = EXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 25, ( result, LVALUE1left, RBRACK1right), rest671)

end
|  ( 23, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( _, LPAREN1left, _))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 9, ( result, LPAREN1left, RPAREN1right), rest671)
end
|  ( 24, ( ( _, ( MlyValue.ntVOID EXP1, _, EXP1right)) :: _ :: ( _, ( 
MlyValue.ntVOID LVALUE1, LVALUE1left, _)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ( let val  LVALUE1 = LVALUE1 ()
 val  EXP1 = EXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 16, ( result, LVALUE1left, EXP1right), rest671)
end
|  ( 25, ( ( _, ( MlyValue.ntVOID EXP1, _, EXP1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  EXP1 = EXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 18, ( result, ID1left, EXP1right), rest671)
end
|  ( 26, ( ( _, ( MlyValue.ntVOID FIELD1, _, FIELD1right)) :: _ :: ( _
, ( MlyValue.ntVOID FIELDS1, FIELDS1left, _)) :: rest671)) => let val 
 result = MlyValue.ntVOID (fn _ => ( let val  FIELDS1 = FIELDS1 ()
 val  FIELD1 = FIELD1 ()
 in ()
end; ()))
 in ( LrTable.NT 19, ( result, FIELDS1left, FIELD1right), rest671)
end
|  ( 27, ( ( _, ( MlyValue.ntVOID FIELD1, FIELD1left, FIELD1right)) ::
 rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
FIELD1 = FIELD1 ()
 in ()
end; ()))
 in ( LrTable.NT 19, ( result, FIELD1left, FIELD1right), rest671)
end
|  ( 28, ( ( _, ( MlyValue.ntVOID EXP1, _, EXP1right)) :: _ :: ( _, ( 
MlyValue.ntVOID ARRAYLVALUE1, ARRAYLVALUE1left, _)) :: rest671)) =>
 let val  result = MlyValue.ntVOID (fn _ => ( let val  ARRAYLVALUE1 = 
ARRAYLVALUE1 ()
 val  EXP1 = EXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 20, ( result, ARRAYLVALUE1left, EXP1right), rest671)

end
|  ( 29, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
FIELDS1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, ID1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1
 = ID1 ()
 val  FIELDS1 = FIELDS1 ()
 in ()
end; ()))
 in ( LrTable.NT 17, ( result, ID1left, RBRACE1right), rest671)
end
|  ( 30, ( ( _, ( _, _, RBRACE1right)) :: _ :: ( _, ( MlyValue.ID ID1,
 ID1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _
 => ( let val  ID1 = ID1 ()
 in ()
end; ()))
 in ( LrTable.NT 17, ( result, ID1left, RBRACE1right), rest671)
end
|  ( 31, ( ( _, ( MlyValue.ntVOID EXP1, _, EXP1right)) :: ( _, ( _, 
MINUS1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn
 _ => ( let val  EXP1 = EXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 14, ( result, MINUS1left, EXP1right), rest671)
end
|  ( 32, ( ( _, ( MlyValue.ntVOID EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.ntVOID EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in ()
end; ()))
 in ( LrTable.NT 15, ( result, EXP1left, EXP2right), rest671)
end
|  ( 33, ( ( _, ( MlyValue.ntVOID EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.ntVOID EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in ()
end; ()))
 in ( LrTable.NT 15, ( result, EXP1left, EXP2right), rest671)
end
|  ( 34, ( ( _, ( MlyValue.ntVOID EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.ntVOID EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in ()
end; ()))
 in ( LrTable.NT 15, ( result, EXP1left, EXP2right), rest671)
end
|  ( 35, ( ( _, ( MlyValue.ntVOID EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.ntVOID EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in ()
end; ()))
 in ( LrTable.NT 15, ( result, EXP1left, EXP2right), rest671)
end
|  ( 36, ( ( _, ( MlyValue.ntVOID EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.ntVOID EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in ()
end; ()))
 in ( LrTable.NT 15, ( result, EXP1left, EXP2right), rest671)
end
|  ( 37, ( ( _, ( MlyValue.ntVOID EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.ntVOID EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in ()
end; ()))
 in ( LrTable.NT 15, ( result, EXP1left, EXP2right), rest671)
end
|  ( 38, ( ( _, ( MlyValue.ntVOID EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.ntVOID EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in ()
end; ()))
 in ( LrTable.NT 15, ( result, EXP1left, EXP2right), rest671)
end
|  ( 39, ( ( _, ( MlyValue.ntVOID EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.ntVOID EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in ()
end; ()))
 in ( LrTable.NT 15, ( result, EXP1left, EXP2right), rest671)
end
|  ( 40, ( ( _, ( MlyValue.ntVOID EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.ntVOID EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in ()
end; ()))
 in ( LrTable.NT 15, ( result, EXP1left, EXP2right), rest671)
end
|  ( 41, ( ( _, ( MlyValue.ntVOID EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.ntVOID EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in ()
end; ()))
 in ( LrTable.NT 15, ( result, EXP1left, EXP2right), rest671)
end
|  ( 42, ( ( _, ( MlyValue.ntVOID EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.ntVOID EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in ()
end; ()))
 in ( LrTable.NT 15, ( result, EXP1left, EXP2right), rest671)
end
|  ( 43, ( ( _, ( MlyValue.ntVOID EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.ntVOID EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in ()
end; ()))
 in ( LrTable.NT 15, ( result, EXP1left, EXP2right), rest671)
end
|  ( 44, ( ( _, ( MlyValue.ntVOID EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.ntVOID EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in ()
end; ()))
 in ( LrTable.NT 10, ( result, EXP1left, EXP2right), rest671)
end
|  ( 45, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.ntVOID 
FUNARGS1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, ID1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1
 = ID1 ()
 val  FUNARGS1 = FUNARGS1 ()
 in ()
end; ()))
 in ( LrTable.NT 12, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 46, ( ( _, ( _, _, RPAREN1right)) :: _ :: ( _, ( MlyValue.ID ID1,
 ID1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _
 => ( let val  ID1 = ID1 ()
 in ()
end; ()))
 in ( LrTable.NT 12, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 47, ( ( _, ( MlyValue.ntVOID EXP1, _, EXP1right)) :: _ :: ( _, ( 
MlyValue.ntVOID FUNARGS1, FUNARGS1left, _)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ( let val  FUNARGS1 = FUNARGS1 ()
 val  EXP1 = EXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 11, ( result, FUNARGS1left, EXP1right), rest671)
end
|  ( 48, ( ( _, ( MlyValue.ntVOID EXP1, EXP1left, EXP1right)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
EXP1 = EXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 11, ( result, EXP1left, EXP1right), rest671)
end
|  ( 49, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.ntVOID EXP1, _,
 _)) :: _ :: ( _, ( MlyValue.ntVOID DECS1, _, _)) :: ( _, ( _, 
LET1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _
 => ( let val  DECS1 = DECS1 ()
 val  EXP1 = EXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 13, ( result, LET1left, END1right), rest671)
end
|  ( 50, ( ( _, ( _, _, END1right)) :: _ :: ( _, ( MlyValue.ntVOID 
DECS1, _, _)) :: ( _, ( _, LET1left, _)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ( let val  DECS1 = DECS1 ()
 in ()
end; ()))
 in ( LrTable.NT 13, ( result, LET1left, END1right), rest671)
end
|  ( 51, ( ( _, ( MlyValue.ntVOID EXP3, _, EXP3right)) :: _ :: ( _, ( 
MlyValue.ntVOID EXP2, _, _)) :: _ :: ( _, ( MlyValue.ntVOID EXP1, _, _
)) :: ( _, ( _, IF1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 val  EXP3 = EXP3 ()
 in ()
end; ()))
 in ( LrTable.NT 21, ( result, IF1left, EXP3right), rest671)
end
|  ( 52, ( ( _, ( MlyValue.ntVOID EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.ntVOID EXP1, _, _)) :: ( _, ( _, IF1left, _)) :: rest671)) =>
 let val  result = MlyValue.ntVOID (fn _ => ( let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in ()
end; ()))
 in ( LrTable.NT 21, ( result, IF1left, EXP2right), rest671)
end
|  ( 53, ( ( _, ( MlyValue.ntVOID EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.ntVOID EXP1, _, _)) :: ( _, ( _, WHILE1left, _)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  EXP1 = EXP1
 ()
 val  EXP2 = EXP2 ()
 in ()
end; ()))
 in ( LrTable.NT 22, ( result, WHILE1left, EXP2right), rest671)
end
|  ( 54, ( ( _, ( MlyValue.ntVOID EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.ntVOID EXP1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID ASSIGNEXP1
, _, _)) :: ( _, ( _, FOR1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  ASSIGNEXP1 = ASSIGNEXP1 ()
 val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in ()
end; ()))
 in ( LrTable.NT 23, ( result, FOR1left, EXP2right), rest671)
end
|  ( 55, ( ( _, ( MlyValue.ntVOID TYDEC1, _, TYDEC1right)) :: ( _, ( 
MlyValue.ntVOID DECS1, DECS1left, _)) :: rest671)) => let val  result
 = MlyValue.ntVOID (fn _ => ( let val  DECS1 = DECS1 ()
 val  TYDEC1 = TYDEC1 ()
 in ()
end; ()))
 in ( LrTable.NT 1, ( result, DECS1left, TYDEC1right), rest671)
end
|  ( 56, ( ( _, ( MlyValue.ntVOID VARDEC1, _, VARDEC1right)) :: ( _, (
 MlyValue.ntVOID DECS1, DECS1left, _)) :: rest671)) => let val  result
 = MlyValue.ntVOID (fn _ => ( let val  DECS1 = DECS1 ()
 val  VARDEC1 = VARDEC1 ()
 in ()
end; ()))
 in ( LrTable.NT 1, ( result, DECS1left, VARDEC1right), rest671)
end
|  ( 57, ( ( _, ( MlyValue.ntVOID FUNDEC1, _, FUNDEC1right)) :: ( _, (
 MlyValue.ntVOID DECS1, DECS1left, _)) :: rest671)) => let val  result
 = MlyValue.ntVOID (fn _ => ( let val  DECS1 = DECS1 ()
 val  FUNDEC1 = FUNDEC1 ()
 in ()
end; ()))
 in ( LrTable.NT 1, ( result, DECS1left, FUNDEC1right), rest671)
end
|  ( 58, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 1, ( result, defaultPos, defaultPos), rest671)
end
|  ( 59, ( ( _, ( MlyValue.ntVOID TY1, _, TY1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, TYPE1left, _)) :: rest671)) =>
 let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  TY1 = TY1 ()
 in ()
end; ()))
 in ( LrTable.NT 3, ( result, TYPE1left, TY1right), rest671)
end
|  ( 60, ( ( _, ( MlyValue.ntVOID EXP1, _, EXP1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, VAR1left, _)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  EXP1 = EXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 5, ( result, VAR1left, EXP1right), rest671)
end
|  ( 61, ( ( _, ( MlyValue.ntVOID EXP1, _, EXP1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _,
 ( _, VAR1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  EXP1 = EXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 5, ( result, VAR1left, EXP1right), rest671)
end
|  ( 62, ( ( _, ( MlyValue.ntVOID EXP1, _, EXP1right)) :: _ :: _ :: (
 _, ( MlyValue.ntVOID TYFIELDS1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1
, _, _)) :: ( _, ( _, FUNCTION1left, _)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  TYFIELDS1 = TYFIELDS1 ()
 val  EXP1 = EXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 7, ( result, FUNCTION1left, EXP1right), rest671)
end
|  ( 63, ( ( _, ( MlyValue.ntVOID EXP1, _, EXP1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, _, _)) :: _ :: _ :: ( _, ( MlyValue.ntVOID TYFIELDS1,
 _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, 
FUNCTION1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  ID1 = ID1 ()
 val  TYFIELDS1 = TYFIELDS1 ()
 val  ID2 = ID2 ()
 val  EXP1 = EXP1 ()
 in ()
end; ()))
 in ( LrTable.NT 7, ( result, FUNCTION1left, EXP1right), rest671)
end
|  ( 64, ( ( _, ( MlyValue.ID ID2, _, ID2right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID TYFIELDS1, 
TYFIELDS1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  TYFIELDS1 = TYFIELDS1 ()
 val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 in ()
end; ()))
 in ( LrTable.NT 24, ( result, TYFIELDS1left, ID2right), rest671)
end
|  ( 65, ( ( _, ( MlyValue.ID ID2, _, ID2right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 in ()
end; ()))
 in ( LrTable.NT 24, ( result, ID1left, ID2right), rest671)
end
|  ( 66, ( ( _, ( MlyValue.ntVOID TYFIELDLIST1, TYFIELDLIST1left, 
TYFIELDLIST1right)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  TYFIELDLIST1 = TYFIELDLIST1 ()
 in ()
end; ()))
 in ( LrTable.NT 4, ( result, TYFIELDLIST1left, TYFIELDLIST1right), 
rest671)
end
|  ( 67, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 4, ( result, defaultPos, defaultPos), rest671)
end
|  ( 68, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671)) =>
 let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 in ()
end; ()))
 in ( LrTable.NT 2, ( result, ID1left, ID1right), rest671)
end
|  ( 69, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
TYFIELDS1, _, _)) :: ( _, ( _, LBRACE1left, _)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ( let val  TYFIELDS1 = 
TYFIELDS1 ()
 in ()
end; ()))
 in ( LrTable.NT 2, ( result, LBRACE1left, RBRACE1right), rest671)
end
|  ( 70, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: _ :: ( _, ( _, 
ARRAY1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn
 _ => ( let val  ID1 = ID1 ()
 in ()
end; ()))
 in ( LrTable.NT 2, ( result, ARRAY1left, ID1right), rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.ntVOID x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : Tiger_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun VAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.VOID,p1,p2))
fun FUNCTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.VOID,p1,p2))
fun BREAK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun NIL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun TO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun FOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun ARRAY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun ASSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun OR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun GE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun GT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun LE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun LT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun NEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun EQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun DIVIDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun TIMES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun MINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.STRING (fn () => i),p1,p2))
fun INT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.INT (fn () => i),p1,p2))
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.ID (fn () => i),p1,p2))
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun UMINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
end
end
