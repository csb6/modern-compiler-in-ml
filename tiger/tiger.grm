%%

%name Tiger

%term TYPE | VAR | FUNCTION | BREAK | OF | END | IN | NIL | LET | DO | TO | FOR | WHILE | ELSE | THEN | IF | ARRAY
    | ASSIGN | OR | AND | GE | GT | LE | LT | NEQ | EQ | DIVIDE | TIMES | MINUS | PLUS
    | DOT | RBRACE | LBRACE | RBRACK | LBRACK | RPAREN | LPAREN | SEMICOLON | COLON | COMMA
    | STRING of string | INT of int | ID of string | EOF | UMINUS

%nonterm START | DECS | TY | TYDEC | TYFIELDS | VARDEC | EXP | FUNDEC | LVALUE | NOVAL | EXPSEQ | FUNARGS | FUNCALL
    | LETEXP | UNARYEXP | BINEXP | ASSIGNEXP | RECORDCREATE | FIELD | FIELDS | ARRAYCREATE | IFELSEEXP | WHILEEXP
    | FOREXP | TYFIELDLIST

%eop EOF
%noshift EOF

%right ELSE THEN DO
%nonassoc ASSIGN
%left SEMICOLON
%right OF
%left OR
%left AND
%nonassoc GE GT LE LT NEQ EQ
%left MINUS PLUS
%left DIVIDE TIMES
%right UMINUS

%pos int
%verbose
%%

START : EXP ()

EXP : NOVAL ()
    | NIL ()
    | BREAK ()
    | INT ()
    | STRING ()
    | LVALUE ()
    | FUNCALL ()
    | EXPSEQ ()
    | LPAREN EXP RPAREN ()
    | LETEXP ()
    | ASSIGNEXP ()
    | RECORDCREATE ()
    | ARRAYCREATE ()
    | UNARYEXP ()
    | BINEXP ()
    | IFELSEEXP ()
    | WHILEEXP ()
    | FOREXP ()

LVALUE : ID ()
       | LVALUE DOT ID ()
       | LVALUE LBRACK EXP RBRACK ()

NOVAL : LPAREN RPAREN ()

ASSIGNEXP : LVALUE ASSIGN EXP ()

FIELD : ID EQ EXP ()

FIELDS : FIELDS COMMA FIELD ()
       | FIELD ()

(* S/R conflict: OK (shifts over LBRACK instead of reducing to ID, which is expected) *)
ARRAYCREATE : ID LBRACK EXP RBRACK OF EXP ()

RECORDCREATE : ID LBRACE FIELDS RBRACE ()
             | ID LBRACE RBRACE ()

UNARYEXP : MINUS EXP %prec UMINUS ()

BINEXP : EXP OR EXP ()
       | EXP AND EXP ()
       | EXP GE EXP ()
       | EXP GT EXP ()
       | EXP LE EXP ()
       | EXP LT EXP ()
       | EXP NEQ EXP ()
       | EXP EQ EXP ()
       | EXP MINUS EXP ()
       | EXP PLUS EXP ()
       | EXP DIVIDE EXP ()
       | EXP TIMES EXP ()

EXPSEQ : EXP SEMICOLON EXP ()

FUNCALL : ID LPAREN FUNARGS RPAREN ()
        | ID LPAREN RPAREN ()

FUNARGS : FUNARGS COMMA EXP ()
        | EXP ()

LETEXP : LET DECS IN EXP END ()
       | LET DECS IN END ()

IFELSEEXP : IF EXP THEN EXP ELSE EXP ()
          | IF EXP THEN EXP ()

WHILEEXP : WHILE EXP DO EXP ()

FOREXP : FOR ASSIGNEXP TO EXP DO EXP ()

DECS : DECS TYDEC ()
     | DECS VARDEC ()
     | DECS FUNDEC ()
     |  ()

TYDEC : TYPE ID EQ TY ()

VARDEC : VAR ID ASSIGN EXP ()
       | VAR ID COLON ID ASSIGN EXP ()

FUNDEC : FUNCTION ID LPAREN TYFIELDS RPAREN EQ EXP ()
       | FUNCTION ID LPAREN TYFIELDS RPAREN COLON ID EQ EXP ()

TYFIELDLIST : TYFIELDS COMMA ID COLON ID ()
            | ID COLON ID ()

TYFIELDS : TYFIELDLIST ()
         |  ()

TY : ID ()
   | LBRACE TYFIELDS RBRACE ()
   | ARRAY OF ID ()