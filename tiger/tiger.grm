structure A = Absyn

val symbols = ref AtomSet.empty

fun addSymbol s = let
    val a = Atom.atom s in
    case AtomSet.find (fn item => Atom.compare (item, a) = EQUAL) (!symbols) of
       NONE      => (symbols := AtomSet.add (!symbols, a); a)
     | SOME item => item
end

%%

%name Tiger
%pure

%term TYPE | VAR | FUNCTION | BREAK | OF | END | IN | NIL | LET | DO | TO | FOR | WHILE | ELSE | THEN | IF | ARRAY
    | ASSIGN | OR | AND | GE | GT | LE | LT | NEQ | EQ | DIVIDE | TIMES | MINUS | PLUS
    | DOT | RBRACE | LBRACE | RBRACK | LBRACK | RPAREN | LPAREN | SEMICOLON | COLON | COMMA
    | STRING of string | INT of int | ID of string | EOF | UMINUS

%nonterm START of A.exp | DECS of A.dec list | VARDEC of A.dec | TYDECS of A.tydec list
    | FUNDECS of A.fundec list | FUNDEC of A.fundec | TYFIELDS of A.field list | TYFIELDLIST of A.field list | TY of A.ty
    | EXP of A.exp | LVALUE of A.var | NOVAL of A.exp | SEQEXP of (A.exp * A.pos) list
    | FUNARGS of A.exp list | FUNCALL of A.exp | LETEXP of A.exp | UNARYEXP of A.exp | BINEXP of A.exp
    | ASSIGNEXP of A.exp | RECORDCREATE of A.exp | FIELDS of (A.symbol * A.exp * pos) list | ARRAYCREATE of A.exp | IFELSEEXP of A.exp
    | WHILEEXP of A.exp | FOREXP of A.exp | ARRAYLVALUE of A.var

%eop EOF
%noshift EOF

%left SEMICOLON
%right ELSE THEN DO
%nonassoc ASSIGN
%right OF
%left OR
%left AND
%nonassoc GE GT LE LT NEQ EQ
%left MINUS PLUS
%left DIVIDE TIMES
%right UMINUS

%pos A.pos
%verbose
%%

START : EXP (EXP)

(* Expressions *)

EXP : NOVAL             (NOVAL)
    | NIL               (A.NilExp)
    | BREAK             (A.BreakExp defaultPos)
    | INT               (A.IntExp INT)
    | STRING            (A.StringExp (STRING, defaultPos))
    | UNARYEXP          (UNARYEXP)
    | BINEXP            (BINEXP)
    | ASSIGNEXP         (ASSIGNEXP)
    | RECORDCREATE      (RECORDCREATE)
    | ARRAYCREATE       (ARRAYCREATE)
    | LVALUE            (A.VarExp LVALUE)
    | FUNCALL           (FUNCALL)
    | SEQEXP            (A.SeqExp (rev SEQEXP))
    | LETEXP            (LETEXP)
    | IFELSEEXP         (IFELSEEXP)
    | WHILEEXP          (WHILEEXP)
    | FOREXP            (FOREXP)
    | LPAREN EXP RPAREN (EXP)

NOVAL : LPAREN RPAREN (A.SeqExp [])

(* Operator expressions *)

UNARYEXP : MINUS EXP %prec UMINUS (A.OpExp {left=A.IntExp 0, oper=A.MinusOp, right=EXP, pos=MINUSleft})

BINEXP : EXP OR EXP     (A.IfExp {test=EXP1, then'=A.IntExp 1, else'=SOME EXP2, pos=ORleft})
       | EXP AND EXP    (A.IfExp {test=EXP1, then'=EXP2, else'=SOME (A.IntExp 0), pos=ANDleft})
       | EXP GE EXP     (A.OpExp {left=EXP1, oper=A.GeOp, right=EXP2, pos=GEleft})
       | EXP GT EXP     (A.OpExp {left=EXP1, oper=A.GtOp, right=EXP2, pos=GTleft})
       | EXP LE EXP     (A.OpExp {left=EXP1, oper=A.LeOp, right=EXP2, pos=LEleft})
       | EXP LT EXP     (A.OpExp {left=EXP1, oper=A.LtOp, right=EXP2, pos=LTleft})
       | EXP NEQ EXP    (A.OpExp {left=EXP1, oper=A.NeqOp, right=EXP2, pos=NEQleft})
       | EXP EQ EXP     (A.OpExp {left=EXP1, oper=A.EqOp, right=EXP2, pos=EQleft})
       | EXP MINUS EXP  (A.OpExp {left=EXP1, oper=A.MinusOp, right=EXP2, pos=MINUSleft})
       | EXP PLUS EXP   (A.OpExp {left=EXP1, oper=A.PlusOp, right=EXP2, pos=PLUSleft})
       | EXP DIVIDE EXP (A.OpExp {left=EXP1, oper=A.DivideOp, right=EXP2, pos=DIVIDEleft})
       | EXP TIMES EXP  (A.OpExp {left=EXP1, oper=A.TimesOp, right=EXP2, pos=TIMESleft})

ASSIGNEXP : LVALUE ASSIGN EXP (A.AssignExp {var=LVALUE, exp=EXP, pos=defaultPos})

(* LValues *)

LVALUE : ID                       (A.SimpleVar (addSymbol ID, defaultPos))
       | LVALUE DOT ID            (A.FieldVar (LVALUE, addSymbol ID, defaultPos))
       | ID LBRACK EXP RBRACK     (A.SubscriptVar (A.SimpleVar (addSymbol ID, defaultPos), EXP, defaultPos))
       | LVALUE LBRACK EXP RBRACK (A.SubscriptVar (LVALUE, EXP, defaultPos))

(* Records *)

RECORDCREATE : ID LBRACE FIELDS RBRACE (A.RecordExp {fields=rev FIELDS, typ=addSymbol ID, pos=defaultPos})
             | ID LBRACE RBRACE        (A.RecordExp {fields=[], typ=addSymbol ID, pos=defaultPos})

FIELDS : FIELDS COMMA ID EQ EXP ((addSymbol ID, EXP, defaultPos)::FIELDS)
       | ID EQ EXP              ([(addSymbol ID, EXP, defaultPos)])

(* Arrays *)

ARRAYCREATE : ID LBRACK EXP RBRACK OF EXP (A.ArrayExp {typ=addSymbol ID, size=EXP1, init=EXP2, pos=defaultPos})

(* Functions *)

FUNCALL : ID LPAREN FUNARGS RPAREN (A.CallExp {func=addSymbol ID, args=rev FUNARGS, pos=defaultPos})
        | ID LPAREN RPAREN         (A.CallExp {func=addSymbol ID, args=[], pos=defaultPos})

FUNARGS : FUNARGS COMMA EXP (EXP::FUNARGS)
        | EXP               ([EXP])

(* Compound expressions *)

SEQEXP : SEQEXP SEMICOLON EXP ((EXP, EXPleft)::SEQEXP)
       | EXP SEMICOLON EXP    ([(EXP2, EXP2left), (EXP1, EXP1left)])

IFELSEEXP : IF EXP THEN EXP ELSE EXP (A.IfExp {test=EXP1, then'=EXP2, else'=SOME EXP3, pos=defaultPos})
          | IF EXP THEN EXP          (A.IfExp {test=EXP1, then'=EXP2, else'=NONE, pos=defaultPos})

WHILEEXP : WHILE EXP DO EXP (A.WhileExp {test=EXP1, body=EXP2, pos=defaultPos})

FOREXP : FOR ID ASSIGN EXP TO EXP DO EXP (A.ForExp {var=addSymbol ID, escape=ref false, lo=EXP1, hi=EXP2, body=EXP3, pos=defaultPos})

LETEXP : LET DECS IN EXP END (A.LetExp {decs=rev DECS, body=EXP, pos=defaultPos})
       | LET DECS IN END     (A.LetExp {decs=rev DECS, body=A.NilExp, pos=defaultPos})

(* Declarations *)

DECS : DECS TYDECS  ((A.TypeDec (rev TYDECS))::DECS)
     | DECS VARDEC  (VARDEC::DECS)
     | DECS FUNDECS ((A.FunctionDec (rev FUNDECS))::DECS)
     |              ([])

TYDECS : TYDECS TYPE ID EQ TY ({name=addSymbol ID, ty=TY, pos=defaultPos}::TYDECS)
       | TYPE ID EQ TY        ([{name=addSymbol ID, ty=TY, pos=defaultPos}])

VARDEC : VAR ID ASSIGN EXP          (A.VarDec {name=addSymbol ID, escape=ref false, typ=NONE, init=EXP, pos=defaultPos})
       | VAR ID COLON ID ASSIGN EXP (A.VarDec {name=addSymbol ID1, escape=ref false, typ=SOME (addSymbol ID2, ID2left), init=EXP, pos=defaultPos})

FUNDECS : FUNDECS FUNDEC (FUNDEC::FUNDECS)
        | FUNDEC         ([FUNDEC])

FUNDEC : FUNCTION ID LPAREN TYFIELDS RPAREN EQ EXP          ({name=addSymbol ID, params=TYFIELDS, result=NONE, body=EXP, pos=defaultPos})
       | FUNCTION ID LPAREN TYFIELDS RPAREN COLON ID EQ EXP ({name=addSymbol ID1, params=TYFIELDS, result=SOME (addSymbol ID2, ID2left), body=EXP, pos=defaultPos})

(* Type Declarations *)

TY : ID                     (A.NameTy (addSymbol ID, defaultPos))
   | LBRACE TYFIELDS RBRACE (A.RecordTy TYFIELDS)
   | ARRAY OF ID            (A.ArrayTy (addSymbol ID, defaultPos))

TYFIELDLIST : TYFIELDLIST COMMA ID COLON ID ({name=addSymbol ID1, escape=ref false, typ=addSymbol ID2, pos=defaultPos}::TYFIELDLIST)
            | ID COLON ID                   ([{name=addSymbol ID1, escape=ref false, typ=addSymbol ID2, pos=defaultPos}])

TYFIELDS : TYFIELDLIST (rev TYFIELDLIST)
         |             ([])